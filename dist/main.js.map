{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/const/utils.ts","webpack:///./src/model/GameManager.ts","webpack:///./src/const/ColorInstances.ts","webpack:///./src/model/Block.ts","webpack:///./src/model/GameAreaManager.ts","webpack:///./src/model/GraphicService.ts","webpack:///./src/index.ts","webpack:///./src/types/BlockType.ts","webpack:///./src/shaders/vshader.ts","webpack:///./src/shaders/fshader.ts","webpack:///./src/model/NextBlockManager.ts","webpack:///./src/types/GameStatus.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__importStar","NUM_BLOCK_TYPES","BLK_OFFSETS_GAME","BLK_OFFSETS_NEXT","GRID_COLOR","Grey","BLK_EDGE_COLOR","White","DEFAULT_GAME_AREA","getRandomInt","max","Math","floor","random","Block_1","GameAreaManager_1","GraphicService_1","NextBlockManager_1","GameStatus_1","conf","GameManager","canvas","next_canvas","boxesPerRow","boxesPerColumn","_this","this","status","GameStatus","Pause","init","lines","document","getElementById","innerText","GameAreaManager","getInstance","clear","curBlock","Block","nextBlock","checkGameOver","drawAll","on","drawBlock","block","drawSquareOnPosition","getCurRotation","color","render","renderLoop","window","setTimeout","requestAnimationFrame","On","refresh","changeCurBlock","dropInterval","stopRender","Over","style","background","dir","ableToMove","graphService","clearBuffer","rotate","move","drawGrid","drawStaticArea","getGameArea","nextManager","gameArea","length","j","undefined","pause","createKeyboardListener","addEventListener","event","confirm","close","getStatus","GraphService","NextBlockManager","positions","width","height","y","x","squaresVertices","concat","drawSquare","drawLine","boardVertices","addToGameArea","eliminateRows","apply","console","log","Yellow","RGB","Red","Blue","Green","Purple","SkyBlue","Orange","BlockType_1","type","offsetY","offsetX","rotations","roationIndex","getNextRotation","nextIndex","rotationEligible","moveRight","moveLeft","nextRotaions","map","index","rotaions","values","loadRotations","utils_1","GameManager_1","includes","splice","Array","boxPerColumn","boxPerRow","instance","vshader_1","fshader_1","graphCanvas","gl","COLOR_BUFFER_BIT","getContext","alert","initGlCanvas","setupShaderAndProgram","setResolution","clearColor","DEPTH_BUFFER_BIT","viewport","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderSource","vertexShaderText","fragmentShaderText","compileShader","getShaderParameter","COMPILE_STATUS","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","validateProgram","VALIDATE_STATUS","useProgram","error","getProgramInfoLog","getShaderInfoLog","resolutionUniformLocation","getUniformLocation","uniform2f","setAttributes","positionAttribLocation","getAttribLocation","colorAttribLocation","vertexAttribPointer","FLOAT","Float32Array","BYTES_PER_ELEMENT","enableVertexAttribArray","merge","verticesArray","colorArray","tempArray","slice","sVertices","numPoints","coloredSquareVertice","squareBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","drawArrays","TRIANGLE_STRIP","lVertices","coloredLineVertices","lineBuffer","LINES","nextCanvas","gameManager","btn","textContent","BlockType","O","push","I","S","Z","L","J","T","join","drawNext","newBlk"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","import * as c from \"./ColorInstances\";\n\nexport const NUM_BLOCK_TYPES = 7;\n\nexport const BLK_OFFSETS_GAME = [21, 5];\n\nexport const BLK_OFFSETS_NEXT = [2, 2];\n\nexport const GRID_COLOR = c.Grey;\n\nexport const BLK_EDGE_COLOR = c.White;\n\nexport const DEFAULT_GAME_AREA = [20, 10];\n\nexport function getRandomInt(max): number{\n    return Math.floor(Math.random() * Math.floor(max));\n}","import { Block } from \"./Block\";\nimport { DirType } from \"../types/Direction\";\nimport { Color } from \"../types/Color\";\nimport  *  as c from \"../const/ColorInstances\";\nimport { GameAreaManager } from \"./GameAreaManager\";\nimport { GraphService } from \"./GraphicService\";\nimport { NextBlockManager } from \"./NextBlockManager\";\nimport { GameStatus } from \"../types/GameStatus\";\nimport * as conf from \"../const/utils\"\n\n\nexport class GameManager {\n    // TODO magic number\n    public static curBlock = new Block(conf.getRandomInt(conf.NUM_BLOCK_TYPES));\n    public static nextBlock = new Block(conf.getRandomInt(conf.NUM_BLOCK_TYPES));\n    private boxesPerRow: number;\n    private boxesPerColumn: number;\n    private graphService: GraphService;\n    private canvas: HTMLCanvasElement;\n    static dropInterval: number = 1000;\n    private nextManager;\n    private renderLoop;\n    private status = GameStatus.Pause;\n    static lines;\n\n    constructor(canvas: HTMLCanvasElement, next_canvas: HTMLCanvasElement, boxesPerRow = conf.DEFAULT_GAME_AREA[1], boxesPerColumn = conf.DEFAULT_GAME_AREA[0]) {\n        this.boxesPerRow = boxesPerRow;\n        this.boxesPerColumn = boxesPerColumn;\n        this.graphService = new GraphService(canvas);\n        this.canvas = canvas;\n        GameAreaManager.getInstance(this.boxesPerColumn, this.boxesPerRow);\n        this.nextManager = new NextBlockManager(next_canvas);\n    }\n\n    init = () => {\n        GameManager.lines = 0;\n        document.getElementById(\"label\").innerText = GameManager.lines;\n        GameAreaManager.getInstance().clear();\n        GameManager.curBlock = new Block(conf.getRandomInt(conf.NUM_BLOCK_TYPES));\n        GameManager.nextBlock = new Block(conf.getRandomInt(conf.NUM_BLOCK_TYPES));\n        this.checkGameOver();\n        this.drawAll();\n        this.on();\n    }\n\n    private drawSquareOnPosition(positions:number[], color: Color) {\n        let width = this.canvas.width / this.boxesPerRow;\n        let height = this.canvas.height / this.boxesPerColumn;\n        for (let i = 0; i < positions.length; i += 2) {\n            let y = positions[i];\n            let x = positions[i+1];\n            let squaresVertices = [];\n            squaresVertices = squaresVertices.concat([x * width, y * height])\n                                            .concat([(x+1) * width, y * height])\n                                            .concat([ x * width, (y+1) * height])\n                                            .concat([(x+1) * width, (y+1) * height]);\n            this.graphService.drawSquare(squaresVertices, color);\n            squaresVertices = squaresVertices.concat(squaresVertices[0], squaresVertices[1], squaresVertices[4], squaresVertices[5], \n                                            squaresVertices[2], squaresVertices[3], squaresVertices[6], squaresVertices[7]);\n            this.graphService.drawLine(squaresVertices, c.White); // TODO: replace c.White with block_edge_color\n        }\n    }\n\n    private drawBlock = (block: Block) => {\n        this.drawSquareOnPosition(block.getCurRotation(), block.color);\n    }\n\n    private drawGrid() {\n        let width = this.canvas.width / this.boxesPerRow;\n        let height = this.canvas.height / this.boxesPerColumn;\n        let boardVertices = [];\n\n        for (let i = 0; i <= this.boxesPerColumn; i++) {\n            boardVertices = boardVertices.concat([0, i * height])\n                                        .concat([this.canvas.width, i * height]);\n        }\n\n        for (let i = 0; i <= this.boxesPerRow; i++) {\n            boardVertices = boardVertices.concat([i * width, 0])\n                                        .concat([ i * width, this.canvas.height]);\n        }\n\n        this.graphService.drawLine(boardVertices, conf.GRID_COLOR); \n    }\n\n    render = () => {\n        this.renderLoop = () => {\n            window.setTimeout(() => {\n                window.requestAnimationFrame(this.renderLoop);\n                if ( this.status == GameStatus.On && !this.refresh(\"DOWN\") ) {\n                    this.changeCurBlock();\n                }\n            }, GameManager.dropInterval);\n        }\n        this.renderLoop();\n    }\n\n    private stopRender = () => {\n        this.status = GameStatus.Over;\n        document.getElementById(\"sBtn\").innerText = \"RETRY\";\n        document.getElementById(\"sBtn\").style.background = \"#18bff2\";\n\n    }\n\n    private changeCurBlock() {\n        GameManager.curBlock.addToGameArea();\n        GameAreaManager.getInstance().eliminateRows();\n        GameManager.curBlock = GameManager.nextBlock;\n        GameManager.nextBlock = new Block(conf.getRandomInt(conf.NUM_BLOCK_TYPES));\n        this.checkGameOver();\n        this.refresh();\n    }\n\n    // quick drop into visiable game area\n    private checkGameOver() {\n        while (Math.max(...GameManager.curBlock.getCurRotation()) > 19 ) {\n            if (! GameManager.curBlock.move(\"DOWN\")) {\n                this.stopRender();\n                console.log(\"Game Over\");\n                break;\n            }\n        }\n    }\n \n    private refresh = (dir: DirType | boolean = false): boolean => {\n        let ableToMove = false;\n        this.graphService.clearBuffer();\n        if (typeof dir === \"boolean\") {\n            if (dir) {\n                GameManager.curBlock.rotate();\n            }\n        } else {\n            ableToMove = GameManager.curBlock.move(dir);\n        }\n        this.drawAll();\n        return ableToMove;\n    }\n\n    private drawAll = () => {\n        this.drawGrid();\n        this.drawStaticArea(GameAreaManager.getInstance().getGameArea());\n        this.drawBlock(GameManager.curBlock);\n        this.nextManager.drawAll()\n    }\n    \n    private drawStaticArea = (gameArea: Color[][]) => {\n        for (let i = 0; i < gameArea.length; i++) {\n            for (let j = 0; j < gameArea[i].length; j++) {\n                if (gameArea[i][j] !== undefined) {\n                    this.drawSquareOnPosition([i, j], gameArea[i][j]);\n                }\n            }\n        }\n    }\n\n    on = () => {\n        document.getElementById(\"sBtn\").innerText = \"PAUSE\";\n        document.getElementById(\"sBtn\").style.background = \"#fff435\";\n        this.status = GameStatus.On;\n    }\n\n    pause = () => {\n        document.getElementById(\"sBtn\").innerText = \"START\";\n        document.getElementById(\"sBtn\").style.background = \"#29d323\";\n        this.status = GameStatus.Pause;\n    }\n\n    createKeyboardListener = () => {\n        window.addEventListener(\"keydown\", (event) => {\n            if (event.key === \"r\") {\n                this.init();\n            } \n            else if (event.key === \"q\") {\n                if (confirm(\"Quit game? \\nThis will close current tab!\")) {\n                    close();\n                }\n            }\n            else if (this.status === GameStatus.On) {\n                if (event.key === \"ArrowDown\") {\n                    this.refresh(\"DOWN\");\n                } else if (event.key === \"ArrowLeft\") {\n                    this.refresh(\"LEFT\");\n                } else if (event.key === \"ArrowRight\") {\n                    this.refresh(\"RIGHT\");\n                } else if (event.key === \"ArrowUp\") {\n                    this.refresh(true);\n                } else if (event.key === \" \") {\n                    while (GameManager.curBlock.move(\"DOWN\")) {}\n                    this.changeCurBlock();\n                } else if (event.key === 'p') {\n                    this.pause();\n                }\n            } else if (this.status === GameStatus.Pause) {\n                if (event.key === 'c') {\n                    this.on();\n                }\n            }\n          }, false);\n    }\n\n    getStatus = () => {\n        return this.status;\n    }\n}\n","import { Color } from \"../types/Color\";\n\n// export const None: Color = { RGB: [] };\n\nexport const Yellow: Color = { RGB: [0.945, 0.792, 0.196] };\n\nexport const Red: Color = { RGB: [0.984, 0.054, 0.278] };\n\nexport const Blue: Color = { RGB: [0.101, 0.109, 0.976] };\n\nexport const Green: Color = { RGB: [0.298, 0.843, 0.098] };\n\nexport const Purple: Color = { RGB: [0.623, 0.098, 0.843] };\n\nexport const SkyBlue: Color = { RGB: [0.243, 0.933, 0.976] };\n\nexport const Orange: Color = { RGB: [1.0, 0.55, 0.0] };\n\nexport const Grey: Color = { RGB: [0.7, 0.7, 0.7]};\n\nexport const White: Color = { RGB: [1.0, 1.0, 1.0] }","import { loadRotations, BlockType } from \"../types/BlockType\";\nimport { DirType } from \"../types/Direction\";\nimport { Color } from \"../types/Color\";\nimport { GameAreaManager } from \"./GameAreaManager\";\nimport * as conf from \"../const/utils\"\n\nexport class Block {\n    type: BlockType;\n    color: Color;\n    rotations: number[][];\n    roationIndex: number;\n\n    constructor(type: BlockType, offsetY: number = conf.BLK_OFFSETS_GAME[0], offsetX: number = conf.BLK_OFFSETS_GAME[1]) {\n        this.type = type;\n        let values = loadRotations(this.type);\n        this.color = values.c;\n        this.rotations = values.r;\n        if (offsetX != 2) {  \n            offsetX = conf.getRandomInt(7) + 2;\n        }\n        this.rotations = this.rotations.map(x => x.map((y, index) => {\n            if (index % 2 === 0) return y + offsetY;\n            else return y + offsetX;\n        }));\n        this.roationIndex = conf.getRandomInt(this.rotations.length);\n    }\n\n    getCurRotation = () => {\n        return this.rotations[this.roationIndex];\n    }\n\n    getNextRotation = () => {\n        return this.rotations[(this.roationIndex+1) % this.rotations.length];\n    }\n\n    rotate = () => {\n        let nextIndex = ( this.roationIndex + 1 ) % this.rotations.length;\n        let ableToRotate = this.rotationEligible( this.rotations, nextIndex);\n        if ( ableToRotate ) {\n            this.roationIndex = nextIndex;\n        } else {\n            let moveRight = this.move(\"RIGHT\");\n            if (moveRight && this.rotationEligible(this.rotations, nextIndex)) {\n                this.roationIndex = nextIndex;\n                return;\n            } else if (moveRight) {\n                this.move(\"LEFT\");\n            }\n            let moveLeft = this.move(\"LEFT\");\n            if (moveLeft && this.rotationEligible(this.rotations, nextIndex)) {\n                this.roationIndex = nextIndex;\n                return;\n            } else if (moveLeft) {\n                this.move(\"RIGHT\");\n            }\n        }\n    }\n    \n    move = (dir: DirType): boolean => {\n        let ableToMove = true;\n        let nextRotaions: number[][];\n        switch (dir) {\n            case \"DOWN\": {\n                nextRotaions = this.rotations.map(x => x.map((y, index) =>{\n                    if (index % 2 === 0) return y - 1;\n                    else return y;\n                }));\n                break;\n            }\n            case \"LEFT\": {\n                nextRotaions = this.rotations.map(x => x.map((y, index) => {\n                    if (index % 2 === 0) return y;\n                    else return y - 1;\n                }));\n                break;\n            }\n            case \"RIGHT\": {\n                nextRotaions = this.rotations.map(x => x.map((y, index) => {\n                    if (index % 2 === 0) return y ;\n                    else return y + 1;\n                }));\n                break;\n            }\n            default: console.log(\"unknown DirType!\");\n        }\n        ableToMove = this.rotationEligible( nextRotaions, this.roationIndex);\n\n        if (ableToMove) this.rotations = nextRotaions;\n        return ableToMove;\n    }\n\n    rotationEligible = (rotaions: number[][], index: number): boolean => {\n        let gameArea = GameAreaManager.getInstance().getGameArea();\n        for (let i = 0; i < rotaions[index].length; i += 2) {\n            let y = rotaions[index][i];\n            let x = rotaions[index][i+1];\n            if ( x < 0 || x > conf.DEFAULT_GAME_AREA[1]-1 || y < 0 || y > conf.DEFAULT_GAME_AREA[0]+1 || gameArea[y][x] != undefined ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    addToGameArea = () => {\n        let gameArea = GameAreaManager.getInstance().getGameArea();\n        for (let i = 0; i < this.rotations[this.roationIndex].length; i += 2) {\n            let y = this.rotations[this.roationIndex][i];\n            let x = this.rotations[this.roationIndex][i+1];\n            if (gameArea[y][x] === undefined) {\n                gameArea[y][x] = this.color;\n            } else {\n                console.log(\"Attaching square on [\" + x + \", \" + y + \"] failed\");\n            }\n        }\n    }\n\n}","import { Color } from \"../types/Color\";\nimport { DEFAULT_GAME_AREA } from \"../const/utils\";\nimport { GameManager } from \"./GameManager\";\n\nexport class GameAreaManager {\n    private gameArea: Color[][] = [];\n    private static boxPerColumn;\n    private static boxPerRow;\n\n    private static instance: GameAreaManager;\n    private constructor() {\n        this.clear();\n    }\n    static getInstance = (boxPerColumn: number = DEFAULT_GAME_AREA[0], boxPerRow = DEFAULT_GAME_AREA[1]) => {\n        if (GameAreaManager.instance === undefined) {\n            GameAreaManager.boxPerColumn = boxPerColumn;\n            GameAreaManager.boxPerRow = boxPerRow;\n            GameAreaManager.instance = new GameAreaManager();\n        }\n        return GameAreaManager.instance;\n    }\n\n    getGameArea = () => {\n        return this.gameArea;\n    }\n\n    eliminateRows = () => {\n        for (let i = 0; i < this.gameArea.length; i++) {\n            if ( !this.gameArea[i].includes(undefined) ) {\n                GameManager.lines++;\n                this.gameArea.splice(i, 1);\n                this.gameArea.splice(this.gameArea.length, 0, new Array(10));\n                i--;\n            }\n        }\n\n        document.getElementById(\"label\").innerText = GameManager.lines;\n\n    }\n\n    clear = () => {\n        this.gameArea = new Array(GameAreaManager.boxPerColumn + 2);\n        for (let i = 0; i < this.gameArea.length; i++)\n            this.gameArea[i] = new Array(GameAreaManager.boxPerRow);\n    }\n}","import { vertexShaderText } from \"../shaders/vshader\";\nimport { fragmentShaderText } from \"../shaders/fshader\";\nimport { Color } from \"../types/Color\";\n\n// Coloring idea from https://www.youtube.com/watch?v=kB0ZVUrI4Aw\n\nexport class GraphService {\n    private gl: WebGLRenderingContext;\n    private graphCanvas: HTMLCanvasElement;\n    private program: WebGLProgram;\n\n    constructor(graphCanvas: HTMLCanvasElement) {\n        this.graphCanvas = graphCanvas;\n        this.gl = graphCanvas.getContext(\"webgl\");\n        if (!this.gl) {\n            alert(\"Your browser doesn't support WebGL!\");\n        }\n        this.init();\n    }\n\n    private init() {\n        this.initGlCanvas();\n        this.setupShaderAndProgram();\n        this.setResolution();\n    }\n\n    private initGlCanvas() {\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.viewport( 0, 0, this.graphCanvas.width, this.graphCanvas.height );\n    }\n\n    private setupShaderAndProgram() {\n        //\n        // Create shaders\n        // \n        let vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);\n        let fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);\n    \n        this.gl.shaderSource(vertexShader, vertexShaderText);\n        this.gl.shaderSource(fragmentShader, fragmentShaderText);\n    \n        this.gl.compileShader(vertexShader);\n        if (!this.gl.getShaderParameter(vertexShader, this.gl.COMPILE_STATUS)) {\n            console.error('ERROR compiling vertex shader!', this.gl.getShaderInfoLog(vertexShader));\n            return;\n        }\n    \n        this.gl.compileShader(fragmentShader);\n        if (!this.gl.getShaderParameter(fragmentShader, this.gl.COMPILE_STATUS)) {\n            console.error('ERROR compiling fragment shader!', this.gl.getShaderInfoLog(fragmentShader));\n            return;\n        }\n    \n        // create Program and attach shader to it\n        this.program = this.gl.createProgram();\n        this.gl.attachShader(this.program, vertexShader);\n        this.gl.attachShader(this.program, fragmentShader);\n        this.gl.linkProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n            console.error('ERROR linking program!', this.gl.getProgramInfoLog(this.program));\n            return;\n        }\n        this.gl.validateProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.VALIDATE_STATUS)) {\n            console.error('ERROR validating program!', this.gl.getProgramInfoLog(this.program));\n            return;\n        }\n        this.gl.useProgram(this.program);\n    }\n\n    private setResolution() {\n        let resolutionUniformLocation = this.gl.getUniformLocation(this.program, \"u_resolution\");\n        this.gl.uniform2f(resolutionUniformLocation, this.gl.canvas.width, this.gl.canvas.height);\n    }\n\n\n    private setAttributes() {\n        var positionAttribLocation = this.gl.getAttribLocation(this.program, 'vertPosition');\n        var colorAttribLocation = this.gl.getAttribLocation(this.program, 'vertColor');\n    \n        this.gl.vertexAttribPointer(\n            positionAttribLocation,\n            2, \n            this.gl.FLOAT,\n            false,\n            5 * Float32Array.BYTES_PER_ELEMENT,\n            0\n        )\n        this.gl.vertexAttribPointer(\n            colorAttribLocation,\n            3, \n            this.gl.FLOAT,\n            false,\n            5 * Float32Array.BYTES_PER_ELEMENT,\n            2 * Float32Array.BYTES_PER_ELEMENT\n        )\n    \n        this.gl.enableVertexAttribArray(positionAttribLocation);\n        this.gl.enableVertexAttribArray(colorAttribLocation);\n    }\n\n    private merge(verticesArray: number[], colorArray: number[]) {\n        let tempArray = [];\n        for (let i = 0; i < verticesArray.length; i += 2) {\n            tempArray = tempArray.concat(verticesArray.slice(i, i+2))\n                                .concat(colorArray);\n        }\n        return new Float32Array([].concat.apply([], tempArray));\n    }\n\n    drawSquare(sVertices: number[], color: Color) {\n        var numPoints = sVertices.length/2;\n        var coloredSquareVertice = this.merge(sVertices, color.RGB);\n        // Create Buffer\n        var squareBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, squareBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, coloredSquareVertice, this.gl.STATIC_DRAW);\n    \n        this.setAttributes();\n        this.gl.drawArrays( this.gl.TRIANGLE_STRIP, 0, numPoints );\n    }\n\n    drawLine(lVertices, color:Color) {\n        var numPoints = lVertices.length / 2;\n        var coloredLineVertices = this.merge(lVertices, color.RGB);\n        var lineBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, lineBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, coloredLineVertices, this.gl.STATIC_DRAW);\n    \n        this.setAttributes();\n        this.gl.drawArrays(this.gl.LINES, 0, numPoints);\n    }\n\n    clearBuffer = () => {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    }\n    \n}","import { GameManager } from \"./model/GameManager\";\n\nconsole.log(\"This is working!\");\n\nlet canvas = <HTMLCanvasElement>document.getElementById(\"gl-canvas\");\nlet nextCanvas = <HTMLCanvasElement>document.getElementById(\"next-canvas\");\n\nlet gameManager = new GameManager(canvas, nextCanvas);\n\ngameManager.init();\ngameManager.createKeyboardListener();\ngameManager.render();\n\nvar btn = document.getElementById(\"sBtn\");\nbtn.addEventListener('click', btnOnclickEvent);\n\nfunction btnOnclickEvent() {\n    if (btn.textContent === \"START\") {\n        gameManager.on();\n    } else if (btn.textContent === \"PAUSE\") {\n        gameManager.pause();\n    } else if (btn.textContent === \"RETRY\") {\n        gameManager.init();\n    } \n}","import { Color } from \"./Color\";\nimport  *  as c from \"../const/ColorInstances\";\n\nexport enum BlockType {O, I, S, Z, L, J, T};\n\nexport function loadRotations(type: BlockType) {\n    var rotaions: number[][] = new Array;\n    var color: Color;\n    switch (type) {\n        case BlockType.O:{\n            color = c.Yellow;\n            rotaions.push([-1,-1, 0,-1, 0,0, -1,0]);\n            break;\n        }\n        case BlockType.I: {\n            color = c.Red;\n            rotaions.push([0,-2, 0,-1, 0,0, 0,1]);\n            rotaions.push([-2,0, -1,0, 0,0, 1,0]);\n            // rotaions.push([0,-2, 0,-1, 0,0, 0,1]);\n            // rotaions.push([-2,-1, -1,-1, 0,-1, 1,-1]);\n            break;\n        }\n        case BlockType.S: {\n            color = c.Blue;\n            rotaions.push([-1,-1, -1,0, 0,0, 0,1]);\n            rotaions.push([1,0, 0,0, 0,1, -1,1]);\n            break;\n        }\n        case BlockType.Z: {\n            color = c.Green;\n            rotaions.push([0,-1, 0,0, -1,0, -1, 1]);\n            rotaions.push([-1,0, 0,0, 0,1, 1,1]);\n            break;\n        }\n        case BlockType.L: {\n            color = c.Purple;\n            rotaions.push([-1,-1, 0,-1, 0,0, 0,1]);\n            rotaions.push([1,0, 0,0, -1,0, -1,1]);\n            rotaions.push([0,-1, 0,0, 0,1, 1,1]);\n            rotaions.push([1,-1, 1,0, 0,0, -1,0]);\n            break;\n        }\n        case BlockType.J: {\n            color = c.SkyBlue;\n            rotaions.push([0,-1, 0,0, 0,1, -1,1]);\n            rotaions.push([1,1, 1,0, 0,0, -1,0]);\n            rotaions.push([1,-1, 0,-1, 0,0, 0,1]);\n            rotaions.push([-1,-1, -1,0, 0,0, 1,0]);\n            break;\n        }\n        case BlockType.T: {\n            color = c.Orange;\n            rotaions.push([0,-1, 0,0, 0,1, -1,0]);\n            rotaions.push([1,0, 0,0, -1,0, 0,1]);\n            rotaions.push([0,-1, 0,0, 0,1, 1,0]);\n            rotaions.push([1,0, 0,0, -1,0, 0,-1]);\n            break;\n        }\n        default: {\n            console.log(\"Unknown BlockType\");\n        }\n    }\n    return { c: color, r: rotaions };\n}\n","\nexport const vertexShaderText = \n[\n'precision mediump float;',\n'attribute vec2 vertPosition;',\n'uniform vec2 u_resolution;',\n'',\n'attribute vec3 vertColor;',\n'varying vec3 fragColor;',\n'',\n'void main() {',\n'',\n'   fragColor = vertColor;',\n'',\n'   // convert the position from pixels to 0.0 to 1.0',\n'   vec2 zeroToOne = vertPosition / u_resolution;',\n\n'   // convert from 0->1 to 0->2',\n'   vec2 zeroToTwo = zeroToOne * 2.0;',\n\n'   // convert from 0->2 to -1->+1 (clipspace)',\n'   vec2 clipSpace = zeroToTwo - 1.0;',\n\n'   gl_Position = vec4(clipSpace, 0, 1);',\n'}',\n].join('\\n')\n\n","export const fragmentShaderText = \n[\n'// fragment shaders dont have a default precision so we need',\n'// to pick one. mediump is a good default',\n'precision mediump float;',\n'',\n'varying vec3 fragColor;',\n'',\n'void main() {',\n'    // gl_FragColor is a special variable a fragment shader',\n'    // is responsible for setting',\n'    gl_FragColor = vec4(fragColor, 1.0);',\n'}'\n].join('\\n');","import { GraphService } from \"./GraphicService\";\nimport { Color } from \"../types/Color\";\nimport  *  as c from \"../const/ColorInstances\";\nimport { Block } from \"./Block\";\nimport { GameManager } from \"./GameManager\";\nimport { BLK_OFFSETS_NEXT, GRID_COLOR, BLK_EDGE_COLOR } from \"../const/utils\";\n\n\nexport class NextBlockManager {\n    private boxesPerRow: number;\n    private boxesPerColumn: number;\n    private graphService: GraphService;\n    private canvas: HTMLCanvasElement;\n\n    constructor(canvas: HTMLCanvasElement, boxesPerRow = 4, boxesPerColumn = 4) {\n        this.boxesPerRow = boxesPerRow;\n        this.boxesPerColumn = boxesPerColumn;\n        this.graphService = new GraphService(canvas);\n        this.canvas = canvas;\n    }\n\n    private drawSquareOnPosition(positions:number[], color: Color) {\n        let width = this.canvas.width / this.boxesPerRow;\n        let height = this.canvas.height / this.boxesPerColumn;\n        for (let i = 0; i < positions.length; i += 2) {\n            let y = positions[i];\n            let x = positions[i+1];\n            let squaresVertices = [];\n            squaresVertices = squaresVertices.concat([x * width, y * height])\n                                            .concat([(x+1) * width, y * height])\n                                            .concat([ x * width, (y+1) * height])\n                                            .concat([(x+1) * width, (y+1) * height]);\n            this.graphService.drawSquare(squaresVertices, color);\n            squaresVertices = squaresVertices.concat(squaresVertices[0], squaresVertices[1], squaresVertices[4], squaresVertices[5], \n                                            squaresVertices[2], squaresVertices[3], squaresVertices[6], squaresVertices[7]);\n            this.graphService.drawLine(squaresVertices, BLK_EDGE_COLOR);\n        }\n    }\n\n    drawNext = () => {\n        let newBlk = new Block(GameManager.nextBlock.type, BLK_OFFSETS_NEXT[0], BLK_OFFSETS_NEXT[1])\n        this.drawSquareOnPosition(newBlk.rotations[GameManager.nextBlock.roationIndex], newBlk.color);\n    }\n\n    drawGrid() {\n        let width = this.canvas.width / this.boxesPerRow;\n        let height = this.canvas.height / this.boxesPerColumn;\n        let boardVertices = [];\n\n        for (let i = 0; i <= this.boxesPerColumn; i++) {\n            boardVertices = boardVertices.concat([0, i * height])\n                                        .concat([this.canvas.width, i * height]);\n        }\n\n        for (let i = 0; i <= this.boxesPerRow; i++) {\n            boardVertices = boardVertices.concat([i * width, 0])\n                                        .concat([ i * width, this.canvas.height]);\n        }\n\n        this.graphService.drawLine(boardVertices, GRID_COLOR);\n    }\n\n    drawAll = () => {\n        this.graphService.clearBuffer();\n        this.drawGrid();\n        this.drawNext();\n    }\n}","export enum GameStatus { On, Pause, Over };"],"sourceRoot":""}